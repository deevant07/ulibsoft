CREATE OR REPLACE TRIGGER WORKINGHOURS_BOOK BEFORE INSERT OR DELETE OR UPDATE ON LIBRARY
FOR EACH ROW

DECLARE 
RDATE DATE;

BEGIN 
SELECT SYSDATE INTO RDATE FROM DUAL;

IF TO_CHAR(RDATE,'HH24')< 10 OR TO_CHAR(RDATE,'HH24') >17 OR TO_CHAR(RDATE,'DAY')
 IN ('SUNDAY') THEN

RAISE_APPLICATION_ERROR(-20002,'THE DATA CAN BE ACESSED ONLY DURING OFFICE HOURS');

END IF;

END;
/

--II trigger on cddetails


CREATE OR REPLACE TRIGGER WORKINGHOURS_CD BEFORE INSERT OR DELETE OR UPDATE ON CDDETAILS
FOR EACH ROW

DECLARE 
RDATE DATE;

BEGIN 

SELECT SYSDATE INTO RDATE FROM DUAL;

IF TO_CHAR(RDATE,'HH24')< 10 OR TO_CHAR(RDATE,'HH24') >17 OR TO_CHAR(RDATE,'DAY')
 IN ('SUNDAY') THEN

RAISE_APPLICATION_ERROR(-20002,'THE DATA CAN BE ACESSED ONLY DURING OFFICE HOURS');

END IF;

END;
/
--III trigger on mzdetails

CREATE OR REPLACE TRIGGER WORKINGHOURS_MZ BEFORE INSERT OR DELETE OR UPDATE ON MZDETAILS
FOR EACH ROW

DECLARE 
RDATE DATE;

BEGIN SELECT SYSDATE INTO RDATE FROM DUAL;

IF TO_CHAR(RDATE,'HH24')< 10 OR TO_CHAR(RDATE,'HH24') >17 OR TO_CHAR(RDATE,'DAY')
 IN ('SUNDAY') THEN

RAISE_APPLICATION_ERROR(-20002,'THE DATA CAN BE ACESSED ONLY DURING OFFICE HOURS');

END IF;

END;

/

--IV trigger on studentdetails

CREATE OR REPLACE TRIGGER WORKINGHOURS_STUDENT BEFORE INSERT OR DELETE OR UPDATE ON STUDENTDETAILS
FOR EACH ROW

DECLARE 
RDATE DATE;

BEGIN SELECT SYSDATE INTO RDATE FROM DUAL;

IF TO_CHAR(RDATE,'HH24')< 10 OR TO_CHAR(RDATE,'HH24') >17 OR TO_CHAR(RDATE,'DAY')
 IN ('SUNDAY') THEN

RAISE_APPLICATION_ERROR(-20002,'THE DATA CAN BE ACESSED ONLY DURING OFFICE HOURS');

END IF;

END;
/
--V trigger on staff table


CREATE OR REPLACE TRIGGER WORKINGHOURS_STAFF BEFORE INSERT OR DELETE OR UPDATE ON STAFF
FOR EACH ROW

DECLARE 
RDATE DATE;

BEGIN SELECT SYSDATE INTO RDATE FROM DUAL;

IF TO_CHAR(RDATE,'HH24')< 10 OR TO_CHAR(RDATE,'HH24') >17 OR TO_CHAR(RDATE,'DAY')
 IN ('SUNDAY') THEN

RAISE_APPLICATION_ERROR(-20002,'THE DATA CAN BE ACESSED ONLY DURING OFFICE HOURS');

END IF;

END;

/
-- Auditing library table and creations of tables and triggers

CREATE OR REPLACE TRIGGER AUDIT_BK_TRI BEFORE UPDATE ON LIBRARY FOR EACH ROW

DECLARE 

NO 		AUDIT_BOOK.ACESSNO%TYPE;
UID  		AUDIT_BOOK.USER_ID%TYPE;
UNAME 		AUDIT_BOOK.USER_NAME%TYPE;
FNAME 		AUDIT_BOOK.FROM_BOOKNAME%TYPE;
TNAME 		AUDIT_BOOK.FROM_AUTHOR1S%TYPE;
FAUT1		AUDIT_BOOK.FROM_AUTHOR1S%TYPE;
TAUT1		AUDIT_BOOK.TO_AUTHOR1F%TYPE;
FAUT2		AUDIT_BOOK.FROM_AUTHOR2S%TYPE;
TAUT2		AUDIT_BOOK.TO_AUTHOR2F%TYPE;
FAUT3		AUDIT_BOOK.FROM_AUTHOR3S%TYPE;
TAUT3		AUDIT_BOOK.TO_AUTHOR3F%TYPE;
FPUB    	AUDIT_BOOK.FROM_PUBLISHER%TYPE;
TPUB    	AUDIT_BOOK.TO_PUBLISHER%TYPE;

--FJDATE		AUDIT_BOOK.FROM_JDATE%TYPE;
--TJDATE		AUDIT_BOOK.TO_JDATE%TYPE;
--FTEACH          	AUDIT_BOOK.FROM_TEACH%TYPE;
--TTEACH   	        AUDIT_BOOK.TO_TEACH%TYPE;
--FPASS 		AUDIT_BOOK.FROM_PASS%TYPE;
--TPASS 		AUDIT_BOOK.TO_PASS%TYPE;
TDATE		AUDIT_BOOK.DATE_TIME%TYPE;

BEGIN
SELECT UID,USER,TO_CHAR(SYSDATE,'DD-MON-YYYY') INTO UID,UNAME,TDATE FROM DUAL;

IF UPDATING THEN
INSERT INTO AUDIT_BOOK VALUES(:OLD.ACESSNO,UID,UNAME,
				 :OLD.BOOKNAME,:NEW.BOOKNAME, 	
				 :OLD.AUTHOR1S,:NEW.AUTHOR1S, 	
				 :OLD.AUTHOR1F,:NEW.AUTHOR1F, 	
				 :OLD.AUTHOR2S,:NEW.AUTHOR2S, 	
				 :OLD.AUTHOR2F,:NEW.AUTHOR2F, 	
				 :OLD.AUTHOR3S,:NEW.AUTHOR3S, 	
				 :OLD.AUTHOR3F,:NEW.AUTHOR3F, 	 
				 :OLD.PUBLISHER,:NEW.PUBLISHER,
				 :OLD.EDITION,:NEW.EDITION,
				 :OLD.ISBN,:NEW.ISBN,
				 :OLD.NOTE,:NEW.NOTE,  
				 :OLD.DESCPRTN,:NEW.DESCPRTN,
				 :OLD.PHY_MEDM,:NEW.PHY_MEDM,
				 :OLD.PLACE,:NEW.PLACE,
				 :OLD.YEAR,:NEW.YEAR,  	 	
				 :OLD.SUBJECT1,:NEW.SUBJECT1,
				 :OLD.SUBJECT2,:NEW.SUBJECT2,
				 :OLD.SUBJECT3,:NEW.SUBJECT3,
	          		 TDATE);

END IF;
END; 
/
--Auditing cddetails by creating tables and triggers

CREATE OR REPLACE TRIGGER AUDIT_CD_TRI BEFORE UPDATE ON CDDETAILS FOR EACH ROW

DECLARE 

NO 		AUDIT_CD.ACESSNO%TYPE;
UID  		AUDIT_CD.USER_ID%TYPE;
UNAME 		AUDIT_CD.USER_NAME%TYPE;
TDATE		AUDIT_CD.DATE_TIME%TYPE;

BEGIN
SELECT UID,USER,TO_CHAR(SYSDATE,'DD-MON-YYYY') INTO UID,UNAME,TDATE FROM DUAL;

IF UPDATING THEN
INSERT INTO AUDIT_CD VALUES(:OLD.CDCODE,UID,UNAME,
				 :OLD.CDNAME,:NEW.CDNAME, 	
				 :OLD.CDVERSION,:NEW.CDVERSION, 	
				 :OLD.BKANO,:NEW.BKANO, 	
				 :OLD.CDSERIAL,:NEW.CDSERIAL, 	
				 :OLD.CDTYPE,:NEW.CDTYPE, 	
				 :OLD.SUBJECT,:NEW.SUBJECT, 	
				 :OLD.RDATE,:NEW.RDATE,
				 :OLD.MZACNO,:NEW.MZACNO,  
				 TDATE);

END IF;
END;
/
--Auditing Mzdetails by creating tables and triggers

CREATE OR REPLACE TRIGGER AUDIT_MZ_TRI BEFORE UPDATE ON MZDETAILS FOR EACH ROW

DECLARE 

NO 		AUDIT_MZ.ACESSNO%TYPE;
UID  		AUDIT_MZ.USER_ID%TYPE;
UNAME 		AUDIT_MZ.USER_NAME%TYPE;
TDATE		AUDIT_MZ.DATE_TIME%TYPE;

BEGIN
SELECT UID,USER,TO_CHAR(SYSDATE,'DD-MON-YYYY') INTO UID,UNAME,TDATE FROM DUAL;

IF UPDATING THEN
INSERT INTO AUDIT_MZ VALUES(:OLD.ACCESSNO,UID,UNAME,
				 :OLD.MZNAME,:NEW.MZNAME, 	
				 :OLD.VOLUME,:NEW.VOLUME, 	
				 :OLD.SOURCE,:NEW.SOURCE, 	
				 :OLD.PAGES,:NEW.PAGES, 	
				 :OLD.SUPPLEMENT,:NEW.SUPPLEMENT, 	
				 :OLD.CDS,:NEW.CDS, 	
				 :OLD.PRICE,:NEW.PRICE, 	 
				 :OLD.PCITY,:NEW.PCITY,
				 :OLD.PERIOD,:NEW.PERIOD,
				 :OLD.RDATE,:NEW.RDATE,
				 :OLD.REMARKS,:NEW.REMARKS,  
				 TDATE);

END IF;
END;
/
--Auditing studentdetails by creating triggers and tables

CREATE OR REPLACE TRIGGER AUDIT_STU_TRI BEFORE UPDATE ON STUDENTDETAILS FOR EACH ROW

DECLARE 

ADNO 		AUDIT_STUDENT.SID%TYPE;
UID  		AUDIT_STUDENT.USER_ID%TYPE;
UNAME 		AUDIT_STUDENT.USER_NAME%TYPE;
FNAME 		AUDIT_STUDENT.FROM_NAME%TYPE;
TNAME 		AUDIT_STUDENT.TO_NAME%TYPE;
FBRANCH 	AUDIT_STUDENT.FROM_BRANCH%TYPE;
TBRANCH 	AUDIT_STUDENT.TO_BRANCH%TYPE;
FYEAR 		AUDIT_STUDENT.FROM_YEAR%TYPE;
TYEAR 		AUDIT_STUDENT.TO_YEAR%TYPE;
FJDATE		AUDIT_STUDENT.FROM_JDATE%TYPE;
TJDATE		AUDIT_STUDENT.TO_JDATE%TYPE;
TDATE		AUDIT_STUDENT.DATE_TIME%TYPE;

BEGIN
SELECT UID,USER,TO_CHAR(SYSDATE,'DD-MON-YYYY') INTO UID,UNAME,TDATE FROM DUAL;

IF UPDATING THEN
INSERT INTO AUDIT_STUDENT VALUES(ADNO,UID,UNAME,
				 :OLD.SNAME,:NEW.SNAME, 	
				 :OLD.BRANCH,:NEW.BRANCH, 	
                   		 :OLD.YEAR,:NEW.YEAR,
				 :OLD.DATEOFJOIN,:NEW.DATEOFJOIN, 	 
           			 
				 TDATE);

END IF;
END; 
/
--Auditing staff table by creating triggers and table

CREATE OR REPLACE TRIGGER AUDIT_STF_TRI BEFORE UPDATE ON STAFF FOR EACH ROW

DECLARE 

NO 		AUDIT_STAFF.LID%TYPE;
UID  		AUDIT_STAFF.USER_ID%TYPE;
UNAME 		AUDIT_STAFF.USER_NAME%TYPE;
FNAME 		AUDIT_STAFF.FROM_NAME%TYPE;
TNAME 		AUDIT_STAFF.TO_NAME%TYPE;
FDEPT   	AUDIT_STAFF.FROM_DEPT%TYPE;
TDEPT   	AUDIT_STAFF.TO_DEPT%TYPE;
FJDATE		AUDIT_STAFF.FROM_JDATE%TYPE;
TJDATE		AUDIT_STAFF.TO_JDATE%TYPE;
FTEACH   	AUDIT_STAFF.FROM_TEACH%TYPE;
TTEACH   	AUDIT_STAFF.TO_TEACH%TYPE;
TDATE		AUDIT_STAFF.DATE_TIME%TYPE;

BEGIN
SELECT UID,USER,TO_CHAR(SYSDATE,'DD-MON-YYYY') INTO UID,UNAME,TDATE FROM DUAL;

IF UPDATING THEN
INSERT INTO AUDIT_STAFF VALUES(NO,UID,UNAME,
				 :OLD.LNAME,:NEW.LNAME, 	
				 :OLD.DEPT,:NEW.DEPT, 	
				 :OLD.JOININGDATE,:NEW.JOININGDATE, 	
				 :OLD.TEACHING,:NEW.TEACHING,
           			 
				 TDATE);

END IF;
END; 
/
